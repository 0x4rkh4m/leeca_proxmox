name: CI

on:
  push:
    branches: [main, stage, develop]
    tags: ["v*"]
  pull_request:
    branches: [main, stage, develop]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings -A dead_code"
  NODE_TLS_REJECT_UNAUTHORIZED: "0"
  CURL_CA_BUNDLE: ""
  SSL_CERT_FILE: ""

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Check clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  dns-check:
    name: DNS Check
    runs-on: ubuntu-latest
    env:
      NODE_TLS_REJECT_UNAUTHORIZED: "0"
    steps:
      - name: Test DNS resolution and HTTPS connectivity
        run: |
          echo "Testing DNS resolution"
          dig +short ${{ secrets.PROXMOX_HOST }} > /dev/null

          echo "Testing HTTPS connectivity"
          response=$(curl -skI https://${{ secrets.PROXMOX_HOST }}:${{ secrets.PROXMOX_PORT }})
          if [[ $response == *"200"* ]] || [[ $response == *"403"* ]] || [[ $response == *"401"* ]]; then
            echo "Connection successful"
            exit 0
          else
            echo "Connection failed"
            exit 1
          fi

  test:
    name: Test Suite
    needs: [check, dns-check]
    runs-on: ubuntu-latest
    env:
      PROXMOX_HOST: ${{ secrets.PROXMOX_HOST }}
      PROXMOX_PORT: ${{ secrets.PROXMOX_PORT }}
      PROXMOX_USERNAME: ${{ secrets.PROXMOX_USERNAME }}
      PROXMOX_PASSWORD: ${{ secrets.PROXMOX_PASSWORD }}
      PROXMOX_REALM: ${{ secrets.PROXMOX_REALM }}
      NODE_TLS_REJECT_UNAUTHORIZED: "0"
      CURL_CA_BUNDLE: ""
      SSL_CERT_FILE: ""
      RUST_BACKTRACE: "1"
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Run tests
        run: |
          cargo test --all-features

  coverage:
    name: Code coverage
    needs: [check, dns-check]
    runs-on: ubuntu-latest
    env:
      PROXMOX_HOST: ${{ secrets.PROXMOX_HOST }}
      PROXMOX_PORT: ${{ secrets.PROXMOX_PORT }}
      PROXMOX_USERNAME: ${{ secrets.PROXMOX_USERNAME }}
      PROXMOX_PASSWORD: ${{ secrets.PROXMOX_PASSWORD }}
      PROXMOX_REALM: ${{ secrets.PROXMOX_REALM }}
      NODE_TLS_REJECT_UNAUTHORIZED: "0"
      CURL_CA_BUNDLE: ""
      SSL_CERT_FILE: ""
      RUST_BACKTRACE: "1"
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate code coverage
        run: |
          cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  security-audit:
    name: Security audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-audit
        run: cargo install cargo-audit
      - name: Run security audit
        run: cargo audit

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - name: Check documentation
        env:
          RUSTDOCFLAGS: -D warnings
        run: cargo doc --no-deps --all-features

  publish:
    name: Publish
    needs: [check, test, coverage, security-audit, docs]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - name: Publish to crates.io
        run: cargo publish --token ${CARGO_REGISTRY_TOKEN}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
